package org.ics.ejb.project;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.ejb.EJB;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import StockExchange.ejb.ics.Stock;
import StockExchange.ejb.ics.StockPortfolio;
import StockExchange.ejb.ics.Users;
import StockExchange.facade.ics.FacadeLocal;

@WebServlet("/Servlet")
public class Servlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	@EJB
	FacadeLocal facade;

	public Servlet() {
		super();
	}

	protected void doPost(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		String method = request.getParameter("method");
		
		
		
		
		if(method.equals("createAccount")){
			createAccount(request, response);
		}
		else if(method.equals("updateUser")) {
			updateUser(request, response);
		}
		else if(method.equals("sellStock")) {
			sellStock(request, response);
		} 
		else if(method.equals("buyStock")) {
			buyStock(request, response);
		}
		else if(method.equals("loginForm")) {
			loginForm(request, response);
		}
		else if(method.equals("money")) {
			money(request, response);
		}
		else {
			
		}
		
		
		
		

	/*	Class[] classes = new Class[2];
		classes[0] = HttpServletRequest.class;
		classes[1] = HttpServletResponse.class;

		try {
			Method m = this.getClass().getMethod(method, classes);
			m.invoke(this, request, response);

		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		}
*/
	}

	private void money(HttpServletRequest request, HttpServletResponse response) {
			List<Users> l = facade.TopTenMoney();
		
		for(Users u : l) {
			System.out.println(u.getUserId());
		}
		
	}

	public void createAccount(HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		String userId = request.getParameter("userId");
		String password = request.getParameter("userPassword");
		String repeatPassword = request.getParameter("repeatPassword");
		String userFName = request.getParameter("userFName");
		String userLName = request.getParameter("userLName");
		String address = request.getParameter("userAddress");
		String niNr = request.getParameter("userNinr");

		Users user = facade.findUser(userId);

		if (user != null) {
			request.getSession().setAttribute("feedbackCreateAcc",
					"userId already exists");
			response.sendRedirect("createAccount.jsp");
			return;
		}

		if (userId.length() < 3) {
			request.getSession().setAttribute("feedbackCreateAcc",
					"userId needs to have at least 3 characters");
			response.sendRedirect("createAccount.jsp");
			return;
		}

		if (password.length() < 3) {
			request.getSession().setAttribute("feedbackCreateAcc",
					"password need to be at least 3 characters");
			response.sendRedirect("createAccount.jsp");
			return;
		}

		if (!password.equals(repeatPassword)) {
			request.getSession().setAttribute("feedbackCreateAcc",
					"passwords does not match");
			response.sendRedirect("createAccount.jsp");
			return;
		}

		Users tmpUser = new Users();
		tmpUser.setUserId(userId);
		tmpUser.setPassword(password);
		tmpUser.setUserFName(userFName);
		tmpUser.setUserLName(userLName);
		tmpUser.setAddress(address);
		tmpUser.setNiNr(niNr);
		tmpUser.setAccount(2000);
		facade.createUser(tmpUser);

		request.getSession().setAttribute("feedbackCreateAcc", " ");
		request.getSession().setAttribute("feedbackLogin", "Account creatad");
		response.sendRedirect("login.jsp");
		return;
	}

	public void updateUser(HttpServletRequest request,
			HttpServletResponse response) throws IOException {

		String userId = request.getParameter("userId");
		String password = request.getParameter("userPassword");
		String userFName = request.getParameter("userFName");
		String userLName = request.getParameter("userLName");
		String address = request.getParameter("userAddress");
		String niNr = request.getParameter("userNinr");

		request.getSession().setAttribute("feedbackStockportfolio", " ");
		Users user = facade.findUser(userId);

		if (user != null) {
		} else {
			request.getSession().setAttribute("feedbackUserInfo", "fail");
			response.sendRedirect("userInformation.jsp");
			return;
		}

		String currentPassword = user.getPassword();

		if (!currentPassword.equals(password)) {
			if (password.length() < 3) {
				request.getSession().setAttribute("feedbackUserInfo",
						"Password next to be 3 characters or more");
				response.sendRedirect("userInformation.jsp");
				request.getSession().setAttribute("user", user);
				return;
			} else {

				user.setPassword(password);
				facade.updateUser(user);
				request.getSession().setAttribute("feedbackUserInfo",
						"Password updated");
				response.sendRedirect("userInformation.jsp");
				request.getSession().setAttribute("user", user);
				return;
			}
		}

		user.setUserFName(userFName);
		user.setUserLName(userLName);
		user.setAddress(address);
		user.setPassword(password);
		user.setNiNr(niNr);

		facade.updateUser(user);
		request.getSession().setAttribute("feedbackUserInfo", "User Updated");
		response.sendRedirect("userInformation.jsp");
		request.getSession().setAttribute("user", user);
		return;
	}

	public void sellStock(HttpServletRequest request,
			HttpServletResponse response) throws IOException {

		String userId, stocktoSell, s;
		int numberOfStocksToSell = 0;

		stocktoSell = request.getParameter("stockToSell");
		userId = request.getParameter("userId");
		s = request.getParameter("numberOfStocksSell");

		try {
			numberOfStocksToSell = Integer.valueOf(s);
			if (numberOfStocksToSell < 1) {
				request.getSession().setAttribute("feedbackStockportfolio",
						"Invalid amount");
				response.sendRedirect("StockPortfolio.jsp");
				return;
			}
		} catch (Exception e1) {
			request.getSession().setAttribute("feedbackStockportfolio",
					"Need to set Amount of Stocks");
			response.sendRedirect("StockPortfolio.jsp");
			return;
		}

		Users user = facade.findUser(userId);

		if (user != null) {
			request.getSession().setAttribute("user", user);
		} else {
			request.getSession().setAttribute("feedbackStockportfolio",
					"something went worng");
			response.sendRedirect("StockPortfolio.jsp");
			return;
		}

		StockPortfolio stockportfolio = facade.findStockPortfolio(userId,
				stocktoSell);

		if (stockportfolio == null) {
			request.getSession().setAttribute("feedbackStockportfolio",
					"Stock not in portfolio");
			response.sendRedirect("StockPortfolio.jsp");
			return;

		} else {

			int newAmount = (stockportfolio.getAmount() - numberOfStocksToSell); //

			if (newAmount > 0) {
				stockportfolio.setAmount(newAmount);
				Stock tmpStock = facade.findStock(stocktoSell);
				Double stockCurrentValue = tmpStock.getvalue();
				float newAccount = (float) (user.getAccount() + (stockCurrentValue * numberOfStocksToSell));
				user.setAccount(newAccount);
				stockportfolio.setAmount(newAmount);
				facade.updateStockPortfolio(stockportfolio);
				facade.updateUser(user);

			} else if (newAmount == 0) { //
				Double stockCurrentValue = facade.findStock(stocktoSell).getvalue();
				float newAccount = (float) (user.getAccount() + (stockCurrentValue * numberOfStocksToSell));
				user.setAccount(newAccount);
				facade.updateUser(user);
				facade.deleteStockPortfolio(stockportfolio);

			} else {
				request.getSession().setAttribute("feedbackStockportfolio",
						"Not enoguh stocks in portfolio");
				response.sendRedirect("StockPortfolio.jsp");
				return;
			}

			ArrayList<Stock> tmpStockList = facade.getAllStocks();

			request.getSession().setAttribute("stockList", tmpStockList);
			ArrayList<StockPortfolio> tmpStockUserList = facade
					.getAllUserStocks(userId);

			request.getSession().setAttribute("userStocks", tmpStockUserList);
			request.getSession().setAttribute("feedbackStockportfolio",
					"Stock sold");
			response.sendRedirect("StockPortfolio.jsp");
			return;

		}

	}

	public void buyStock(HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		String stocktoBuy, userId, s;
		int numberOfStocksToBuy = 0;

		stocktoBuy = request.getParameter("stockToBuy");
		userId = request.getParameter("userId");
		s = request.getParameter("numberOfStocksBuy");

		try {
			numberOfStocksToBuy = Integer.valueOf(s);
			if (numberOfStocksToBuy < 1) {
				request.getSession().setAttribute("feedbackStockportfolio",
						"Invalid amount");
				response.sendRedirect("StockPortfolio.jsp");
				return;
			}
		} catch (Exception e1) {
			request.getSession().setAttribute("feedbackStockportfolio",
					"Need to set Amount of Stocks");
			response.sendRedirect("StockPortfolio.jsp");
			return;
		}

		Users user = facade.findUser(userId);

		if (user != null) {
			request.getSession().setAttribute("user", user);
		} else {
			request.getSession().setAttribute("feedbackStockportfolio", "fail");
			response.sendRedirect("StockPortfolio.jsp");
			return;
		}

		Stock stock = facade.findStock(stocktoBuy);

		if (stock == null) {
			request.getSession().setAttribute("feedbackStockportfolio",
					"stock does not exists");
			response.sendRedirect("StockPortfolio.jsp");
			return;
		}

		if ((stock.getvalue() * numberOfStocksToBuy) > user.getAccount()) {
			request.getSession().setAttribute("feedbackStockportfolio",
					"not enough money in account");
			response.sendRedirect("StockPortfolio.jsp");
			return;
		}

		StockPortfolio sp = facade.findStockPortfolio(userId, stocktoBuy);

		if (sp != null) {
			Double stockCurrentValue = facade.findStock(stocktoBuy)
					.getvalue();
			float newAccount = (float) (user.getAccount() - (stockCurrentValue * numberOfStocksToBuy));
			user.setAccount(newAccount);
			int newAmount = (sp.getAmount() + numberOfStocksToBuy); //
			sp.setAmount(newAmount);
			facade.updateStockPortfolio(sp);
			facade.updateUser(user);

			ArrayList<Stock> tmpStockList = facade.getAllStocks();

			request.getSession().setAttribute("stockList", tmpStockList);
			ArrayList<StockPortfolio> tmpStockUserList = facade
					.getAllUserStocks(userId);

			request.getSession().setAttribute("userStocks", tmpStockUserList);
			request.getSession().setAttribute("feedbackStockportfolio",
					"Stock bought");
			response.sendRedirect("StockPortfolio.jsp");
			return;

		} else {

			try {
				StockPortfolio newStockportfolio = new StockPortfolio(userId, stocktoBuy);
				String val = stock.getvalue().toString();
				float stockCurrentValue = Float.valueOf(val);
				float newAccount = (float) (user.getAccount() - (stockCurrentValue * numberOfStocksToBuy));//
				user.setAccount(newAccount);

				SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
				Date now = new Date();
				String currentDate = df.format(now);

				newStockportfolio.setDate(currentDate);
				newStockportfolio.setValue(stockCurrentValue);
				newStockportfolio.setAmount(numberOfStocksToBuy); //
				facade.createStockPortfolio(newStockportfolio);
				facade.updateUser(user);

				ArrayList<Stock> tmpStockList = facade.getAllStocks();

				request.getSession().setAttribute("stockList", tmpStockList);
				ArrayList<StockPortfolio> tmpStockUserList = facade
						.getAllUserStocks(userId);

				request.getSession().setAttribute("userStocks",
						tmpStockUserList);
				request.getSession().setAttribute("feedbackStockportfolio",
						"Stock bought");
				response.sendRedirect("StockPortfolio.jsp");
				return;

			} catch (NumberFormatException e) {
				request.getSession().setAttribute("feedbackStockportfolio",
						"Failed to buy Stock");
				response.sendRedirect("StockPortfolio.jsp");
				return;
			}

		}

	}

	public void loginForm(HttpServletRequest request,
			HttpServletResponse response) throws IOException {

		String userId, password;

		userId = request.getParameter("userId");
		password = request.getParameter("password");

		boolean result;

		Users user = null;
		try {
			user = facade.findUser(userId);
			if (user.getPassword().equals(password)) {
				result = true;
			} else {
				result = false;

			}
		} catch (Exception e) {
			result = false;
		}

		if (result == true) {
			request.getSession().setAttribute("user", user);
			ArrayList<Stock> tmpStockList = facade.getAllStocks();

			request.getSession().setAttribute("stockList", tmpStockList);
			ArrayList<StockPortfolio> tmpStockUserList = facade
					.getAllUserStocks(userId);

			request.getSession().setAttribute("userStocks", tmpStockUserList);
			request.getSession().setAttribute("feedbackStockportfolio", " ");
			request.getSession().setAttribute("feedbackLogin", " ");
			response.sendRedirect("StockPortfolio.jsp");

		} else {
			request.getSession().setAttribute("feedbackLogin",
					"Incorrect username or password");

			response.sendRedirect("login.jsp");

		}

	}

}
